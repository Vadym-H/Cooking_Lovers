@model RecipeViewModel
@{
    ViewData["Title"] = "Create Recipe";
}
<div class="container">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card">
                <div class="card-header text-white bg-primary">
                    <h2>Create Recipe</h2>
                </div>
                <div class="card-body">
                    <form asp-action="CreateRecipe" method="post">
                        <div class="form-group mb-3">
                            <label asp-for="Title" class="form-label mt-4">Name</label>
                            <input asp-for="Title" class="form-control" placeholder="Enter the name of Recipe">
                            <span asp-validation-for="Title" class="text-danger"></span>
                        </div>
                        <div class="form-group mb-3">
                            <label asp-for="Description" class="form-label mt-4">Description</label>
                            <textarea asp-for="Description" rows="3" class="form-control" placeholder="Enter the description of Recipe"></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>
                        <div class="form-group mb-3">
                            <label asp-for="Ingredients" class="form-label mt-4">Add ingredients</label>
                            <div class="d-flex justify-content-between">
                                <div>
                                    <input class="form-control" id="nameId" placeholder="Ingredient">
                                </div>
                                <div>
                                    <input class="form-control" id="amountId" placeholder="Amount" type="number">
                                </div>
                                <div>
                                    <input class="form-control" id="unitId" placeholder="Unit">
                                </div>
                                <input asp-for="Ingredients" type="hidden" id="inputIngredients">
                            </div>
                            <span asp-validation-for="Ingredients" class="text-danger"></span>
                            <div class="d-flex justify-content-end my-2">
                                <button class="btn btn-sm btn-success" id="addIngredient" style="min-width: 5rem" type="button">Add</button>
                            </div>
                            <div class="">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>Ingredient</th>
                                            <th>Amount</th>
                                            <th>Unit</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="ingredientsTableBody">
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div class="form-group mb-3">
                            <label asp-for="PreparationTime" class="form-label mt-4">Preparation Time</label>
                            <input asp-for="PreparationTime" class="form-control" type="time" id="PreparationTime">
                            <span asp-validation-for="PreparationTime" class="text-danger"></span>
                        </div>
                        <div class="d-flex justify-content-between mx-3">
                            <button class="btn btn-primary btn-lg" type="submit">Create</button>
                            <a class="btn btn-secondary btn-lg" asp-controller="Home" asp-action="Index">Cancel</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let editingRow = null;

        // Add or update ingredient
        $('#addIngredient').click(function () {
            const name = $('#nameId').val().trim();
            const quantity = $('#amountId').val().trim();
            const unit = $('#unitId').val().trim();

            if (!name || !quantity || !unit) {
                alert("Please fill in all fields.");
                return;
            }

            if (editingRow) {
                // Update existing row
                $(editingRow).find('td:eq(0)').text(name);
                $(editingRow).find('td:eq(1)').text(quantity);
                $(editingRow).find('td:eq(2)').text(unit);
                editingRow = null;
                $('#addIngredient').text('Add');
            } else {
                // Add new row
                const row = `<tr>
                    <td>${name}</td>
                    <td>${quantity}</td>
                    <td>${unit}</td>
                    <td class="d-flex">
                        <button class="btn btn-sm btn-secondary me-3 editIngredient" type="button">Edit</button>
                        <button class="btn btn-sm btn-danger ms-3 removeIngredient" type="button">Remove</button>
                    </td>
                </tr>`;
                $('#ingredientsTableBody').append(row);
            }

            // Clear input fields
            $('#nameId').val('');
            $('#amountId').val('');
            $('#unitId').val('');
        });

        // Edit ingredient
        $(document).on('click', '.editIngredient', function () {
            const row = $(this).closest('tr');
            const name = row.find('td:eq(0)').text();
            const quantity = row.find('td:eq(1)').text();
            const unit = row.find('td:eq(2)').text();

            $('#nameId').val(name);
            $('#amountId').val(quantity);
            $('#unitId').val(unit);

            editingRow = row;
            $('#addIngredient').text('Update');
        });

        // Remove ingredient
        $(document).on('click', '.removeIngredient', function () {
            const row = $(this).closest('tr');
            if (editingRow && editingRow.is(row)) {
                editingRow = null;
                $('#addIngredient').text('Add');
                $('#nameId').val('');
                $('#amountId').val('');
                $('#unitId').val('');
            }
            row.remove();
        });

        // On form submit, collect ingredients and preparation time
        $('form[asp-action="CreateRecipe"]').submit(function (e) {
            const ingredients = [];
            $('#ingredientsTableBody tr').each(function () {
                const name = $(this).find('td:eq(0)').text();
                const quantity = $(this).find('td:eq(1)').text();
                const unit = $(this).find('td:eq(2)').text();
                ingredients.push({ name, quantity, unit });
            });
            $('#inputIngredients').val(ingredients);

            // Convert preparation time to string
            const prepTime = $('#PreparationTime').val();
            $('input[name="PreparationTimeString"]').remove();
            $(this).append(
                $('<input>')
                    .attr('type', 'hidden')
                    .attr('name', 'PreparationTimeString')
                    .val(prepTime ? prepTime.toString() : '')
            );
        });
    </script>
    <partial name="_ValidationScriptsPartial" />

        <script>
            let editingRow = null;

            $(document).ready(function () {
                // Add or Save ingredient functionality
                $('#addIngredient').click(function (e) {
                    e.preventDefault();
                    const ingredientName = $('#nameId').val();
                    const ingredientAmount = $('#amountId').val();
                    const ingredientUnit = $('#unitId').val();

                    if (ingredientName && ingredientAmount && ingredientUnit) {
                        if (editingRow) {
                            // Save changes to the editing row
                            $(editingRow).find('td:eq(0)').text(ingredientName);
                            $(editingRow).find('td:eq(1)').text(ingredientAmount);
                            $(editingRow).find('td:eq(2)').text(ingredientUnit);
                            editingRow = null;
                            $('#addIngredient').text('Add');
                        } else {
                            // Add new row
                            const newRow = `<tr>
                                <td>${ingredientName}</td>
                                <td>${ingredientAmount}</td>
                                <td>${ingredientUnit}</td>
                                <td class="d-flex">
                                    <button class="btn btn-sm btn-secondary me-3 editIngredient" type="button">Edit</button>
                                <button class="btn btn-sm btn-danger ms-3 removeIngredient" type="button">Remove</button>
                                </td>
                            </tr>`;
                            $(this).closest('.form-group').find('tbody').append(newRow);
                        }
                        // Clear input fields
                        $('#nameId').val('');
                        $('#amountId').val('');
                        $('#unitId').val('');
                    } else {
                        alert("Please fill in all fields.");
                    }
                });

                // Edit ingredient functionality (delegated)
                $(document).on('click', '.editIngredient', function () {
                    const row = $(this).closest('tr');
                    const name = row.find('td:eq(0)').text();
                    const amount = row.find('td:eq(1)').text();
                    const unit = row.find('td:eq(2)').text();

                    $('#nameId').val(name);
                    $('#amountId').val(amount);
                    $('#unitId').val(unit);

                    editingRow = row;
                    $('#addIngredient').text('Save');
                });

                // Remove ingredient functionality (delegated)
                $(document).on('click', '.removeIngredient', function () {
                    const row = $(this).closest('tr');
                    // If currently editing this row, reset editing state
                    if (editingRow && editingRow.is(row)) {
                        editingRow = null;
                        $('#addIngredient').text('Add');
                        $('#nameId').val('');
                        $('#amountId').val('');
                        $('#unitId').val('');
                    }
                    row.remove();
                });
            });
        </script>
    <script>
        let editingRow = null;

        // Helper to collect ingredients as list of string objects
        function getIngredientsList() {
            const ingredients = [];
            $('tbody tr').each(function () {
                const name = $(this).find('td:eq(0)').text();
                const amount = $(this).find('td:eq(1)').text();
                const unit = $(this).find('td:eq(2)').text();
                ingredients.push(`${name}|${amount}|${unit}`);
            });
            return ingredients;
        }

        // On submit, collect ingredients and preparation time as string
        $(document).ready(function () {
            // ...existing add/edit/remove logic...

            $('form[asp-action="CreateRecipe"]').submit(function (e) {
                // Collect ingredients into a list of string
                const ingredientsList = getIngredientsList();

                // Set the value of the hidden input field with id 'inputIngredients'
                $('#inputIngredients').val(ingredientsList.join(';'));

                // Remove any previous hidden fields
                $('input[name="IngredientsList"]').remove();

                // Add as hidden fields (one per ingredient string)
                for (let i = 0; i < ingredientsList.length; i++) {
                    $(this).append(
                        $('<input>')
                            .attr('type', 'hidden')
                            .attr('name', 'IngredientsList')
                            .val(ingredientsList[i])
                    );
                }

                // Convert preparationTime to string and set as hidden field
                const prepTime = $('#PreparationTime').val();
                $('input[name="PreparationTimeString"]').remove();
                $(this).append(
                    $('<input>')
                        .attr('type', 'hidden')
                        .attr('name', 'PreparationTimeString')
                        .val(prepTime ? prepTime.toString() : '')
                );
                // Allow form to submit
            });
        });

                // Convert preparationTime to string and set as hidden field
                const prepTime = $('#PreparationTime').val();
                $('input[name="PreparationTimeString"]').remove();
                $(this).append(
                    $('<input>')
                        .attr('type', 'hidden')
                        .attr('name', 'PreparationTimeString')
                        .val(prepTime ? prepTime.toString() : '')
                );
                // Allow form to submit
            });
        });
    </script>
<partial name="_ValidationScriptsPartial" />
}